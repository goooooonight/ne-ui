@use 'function.scss' as *;
@use 'var.scss' as *;
@use 'config.scss';
@use 'sass:map';

// 设置主题色
@mixin set-main-color() {
  // 设置基础颜色 white 和 black
  #{create-var-name(('color', 'white'))}: #{map.get($colors, 'white')};
  #{create-var-name(('color', 'black'))}: #{map.get($colors, 'black')};

  // 设置主题颜色
  @each $type in $types {
    #{create-var-name(('color', $type))}: #{map.get($colors, $type, 'base')};
  }
}
// 设置主题渐变色
@mixin set-main-mix-color() {
  @each $type in $types {
    // 设置浅色
    @for $number from 1 through 9 {
      #{create-var-name(('color', $type, 'light', $number))}: #{map.get(
          $colors,
          $type,
          'light-#{$number}'
        )};
    }
    // 设置深色
    #{create-var-name(('color', $type, 'dark', 2))}: #{map.get(
        $colors,
        $type,
        'dark-2'
      )};
  }
}

// 设置全局变量名
@mixin set-global-name() {
  @each $key, $values in $global {
    @if $values != '' {
      // e.g.: 'defult' - '14px'
      @each $children-key, $children-value in $values {
        #{create-var-name(($key ,$children-key))}: $children-value;
      }
    }
  }
}

// BEM
// b
@mixin b($block) {
  $B: config.$namespace + config.$common-separator + $block !global;

  .#{$B} {
    @content;
  }
}
// e
@mixin e($element) {
  @at-root {
    #{& + config.$element-separator + $element} {
      @content;
    }
  }
}
// m
@mixin m($modifier) {
  @at-root {
    #{& + config.$modifier-separator + $modifier} {
      @content;
    }
  }
}
// when (is状态)
@mixin when($state) {
  @at-root {
    &.#{config.$state-prefix + $state} {
      @content;
    }
  }
}

// 生成组件css变量
@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    // @if $attribute == 'default' {
    //   #{getCssVarName($name)}: #{$value};
    // } @else {
    //   #{getCssVarName($name, $attribute)}: #{$value};  // 生成 --f-button-outline-color
    // }
    #{get-var-name($name, $attribute)}: #{$value}; // 生成 --ne-button-outline-color
  }
}

// 设置css变量
@mixin set-css-var($name-attrs, $css-attrs) {
  $var-name: create-var-name($name-attrs);
  $var: var(#{create-var-name($css-attrs)});
  #{$var-name}: #{$var};
}